openapi: 3.0.0
info:
  title: Admin Management API
  description: API documentation for managing admin resources
  version: 1.0.0
servers:
  - url: https://backend-tour-booking-node-js-mongodb.onrender.com/api/v1/admin
    description: Admin use router this management
    variables:
      environment:
        default: production
  - url: https://backend-tour-booking-node-js-mongodb.onrender.com/api/v1/auth
    description: Traveler and Guide use this
    variables:
      environment:
        default: production
paths:
  /login:
    post:
      summary: Admin login
      description: Allows an admin to log in with a username and password.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the admin
                  example: Chinh6823
                password:
                  type: string
                  description: The password of the admin
                  example: Chinh.789123
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Access token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                  message:
                    type: string
                    example: Login successful
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Username or password is missing
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid username or password

  /manage-user/user-list:
    get:
      summary: List all users
      tags:
        - Admin
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 12345
                    username:
                      type: string
                      example: john_doe
        400:
          description: Bad request
        401:
          description: Unauthorized

  /manage-user/user-detail/{id}:
    get:
      summary: Get user details
      tags:
        - Admin
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 12345
                  username:
                    type: string
                    example: john_doe
                  email:
                    type: string
                    example: john@example.com
        400:
          description: Bad request
        401:
          description: Unauthorized

  /manage-user/create-user:
    post:
      summary: Create multiple users
      tags:
        - Admin
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    type: object
                    properties:
                      firstName:
                        type: string
                        example: Alice
                      lastName:
                        type: string
                        example: Smith
                      username:
                        type: string
                        example: alice_smith
                      phone:
                        type: string
                        example: 0991312312321
                      age:
                        type: integer
                        example: 312312312
                      email:
                        type: string
                        example: alice@example.com
                      role_id:
                        type: string
                        example: 672b888f4c2051465239b718
      responses:
        201:
          description: Users created successfully
        400:
          description: Bad request
        401:
          description: Unauthorized

  /manage-user/update-user:
    put:
      summary: Update user details
      tags:
        - Admin
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    id:
                      type: string,
                      example: 312312312312
                    firstName:
                      type: string
                      example: Alice
                    lastName:
                      type: string
                      example: Smith
                    username:
                      type: string
                      example: alice_smith
                    phone:
                      type: string
                      example: 0991312312321
                    age:
                      type: integer
                      example: 312312312
                    email:
                      type: string
                      example: alice@example.com
                    role_id:
                      type: string
                      example: 672b888f4c2051465239b718
      responses:
        200:
          description: User updated successfully
        400:
          description: Bad request
        401:
          description: Unauthorized

  /manage-user/delete-user:
    delete:
      summary: Delete multiple users
      tags:
        - Admin
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                    example:
                      _id: "6731ac666836ca5c885f7e3d"
      responses:
        200:
          description: Users deleted successfully
        400:
          description: Bad request
        401:
          description: Unauthorized

  /manage-role/create-role:
    post:
      summary: Create new roles
      description: Allows an admin to create a new role.
      tags:
        - Role Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                    example:
                      name: "Student"
      responses:
        200:
          description: Role created successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.

  /manage-role/role-list:
    get:
      summary: Get list of roles
      description: Retrieves a list of all roles.
      tags:
        - Role Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      responses:
        200:
          description: List of roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    roleName:
                      type: string
                      example: "Admin"
        401:
          description: Unauthorized.

  /manage-role/edit-role/{id}:
    patch:
      summary: Edit an existing role
      description: Allows an admin to update an existing role.
      tags:
        - Role Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
        - in: path
          name: id
          required: true
          description: ID of the role to delete.
          schema:
            type: string
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleName:
                  type: string
                  example: "Super Admin"
      responses:
        200:
          description: Role updated successfully.
        400:
          description: Invalid data.
        401:
          description: Unauthorized.

  /manage-role/delete-role/{id}:
    delete:
      summary: Delete a role
      description: Deletes a specific role by ID.
      tags:
        - Role Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
        - in: path
          name: id
          required: true
          description: ID of the role to delete.
          schema:
            type: string
            example: 1
      responses:
        200:
          description: Role deleted successfully.
        404:
          description: Role not found.
        401:
          description: Unauthorized.

  /manage-role/delete-roles:
    delete:
      summary: Delete multiple roles
      description: Deletes multiple roles.
      tags:
        - Role Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                    example:
                      _id: 673e065b8d49ec0c90020712
      responses:
        200:
          description: Roles deleted successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.
  /manage-tour/create-tours:
    post:
      summary: Create multiple tours
      tags:
        - Tour Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tours:
                  type: array
                  items:
                    type: object
                    required:
                      - city
                      - attractions
                      - days
                      - prices
                      - guide
                      - images
                      - createdAt
                    properties:
                      city:
                        type: string
                        description: Name of the city for the tour
                        example: "Paris"
                      attractions:
                        type: string
                        description: Comma-separated list of attractions
                        example: "Eiffel Tower, Louvre Museum, Notre-Dame Cathedral"
                      days:
                        type: integer
                        description: Duration of the tour in days
                        example: 3
                      prices:
                        type: object
                        required:
                          - adult
                          - child
                        properties:
                          adult:
                            type: number
                            format: float
                            description: Price for adults
                            example: 200
                          child:
                            type: number
                            format: float
                            description: Price for children
                            example: 100
                      guide:
                        type: string
                        description: Guide's unique ID
                        example: "672b9fd4041d7643abab83fe"
                      images:
                        type: array
                        items:
                          type: string
                        description: List of image filenames for the tour
                        example:
                          - "paris1.jpg"
                          - "paris2.jpg"
                          - "paris3.jpg"
      responses:
        200:
          description: Tours created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tours created successfully"
        400:
          description: Bad request, invalid input
        401:
          description: Unauthorized, invalid or missing token

  /manage-tour/tour-detail/{id}:
    get:
      summary: Get tour details
      description: Retrieves details of a specific tour by ID.
      tags:
        - Tour Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
        - in: path
          name: id
          required: true
          description: ID of the tour to retrieve.
          schema:
            type: string
            example: 1
      responses:
        200:
          description: Tour details retrieved successfully.
        404:
          description: Tour not found.
        401:
          description: Unauthorized.

  /manage-tour/update-tour:
    put:
      summary: Update an existing tour
      description: Allows an admin to update an existing tour.
      tags:
        - Tour Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            tour:

            schema:
              type: object
              properties:
                tour:
                  type: object
                properties:
                id:
                  type: string
                  description: Name of the city for the tour
                  example: "21321321"
                city:
                  type: string
                  description: Name of the city for the tour
                  example: "Paris"
                attractions:
                  type: string
                  description: Comma-separated list of attractions
                  example: "Eiffel Tower, Louvre Museum, Notre-Dame Cathedral"
                days:
                  type: integer
                  description: Duration of the tour in days
                  example: 3
                prices:
                  type: object
                  required:
                    - adult
                    - child
                  properties:
                    adult:
                      type: number
                      format: float
                      description: Price for adults
                      example: 200
                    child:
                      type: number
                      format: float
                      description: Price for children
                      example: 100
                guide:
                  type: string
                  description: Guide's unique ID
                  example: "672b9fd4041d7643abab83fe"
                images:
                  type: array
                  items:
                    type: string
                  description: List of image filenames for the tour
                  example:
                    - "paris1.jpg"
                    - "paris2.jpg"
                    - "paris3.jpg"
                createdAt:
                  type: string
                  format: date-time
                  description: Timestamp when the tour was created
                  example: "2023-11-06T14:33:26.000Z"
      responses:
        200:
          description: Tour updated successfully.
        400:
          description: Invalid data.
        401:
          description: Unauthorized.

  /manage-tour/remove-tour:
    delete:
      summary: Remove a tour
      description: Removes a specific tour.
      tags:
        - Tour Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                    example:
                      _id: 673e065b8d49ec0c90020712
      responses:
        200:
          description: Tour removed successfully.
        404:
          description: Tour not found.
        401:
          description: Unauthorized.

  /manage-tour/tour-list:
    get:
      summary: Get list of all tours
      description: Retrieves a list of all tours.
      tags:
        - Tour Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: token
      requestBody:
      responses:
        200:
          description: List of tours.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    tourName:
                      type: string
                      example: "Paris Adventure"
        401:
          description: Unauthorized.

  /manage-booking-tour/create-booking-tour:
    post:
      summary: Get list of bookings
      description: Retrieves a list of all bookings.
      tags:
        - Booking Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - tour_id
                - guide_id
                - number_visitors
                - start_tour
                - time
              properties:
                user_id:
                  type: string
                  description: The ID of the user booking the tour
                  example: "605c72ef1532071f3f6c1d3b"
                tour_id:
                  type: string
                  description: The ID of the tour being booked
                  example: "tour_12345"
                guide_id:
                  type: string
                  description: The ID of the tour guide assigned to the booking
                  example: "guide_98765"
                number_visitors:
                  type: integer
                  description: The number of visitors for the booking
                  example: 4
                start_tour:
                  type: string
                  format: date-time
                  description: The date and time when the tour starts
                  example: "2024-12-01T09:00:00Z"
                time:
                  type: object
                  required:
                    - start_time
                    - end_time
                  properties:
                    start_time:
                      type: string
                      format: date-time
                      description: The start time of the tour
                      example: "2024-12-01T09:00:00Z"
                    end_time:
                      type: string
                      format: date-time
                      description: The end time of the tour
                      example: "2024-12-01T17:00:00Z"
      responses:
        200:
          description: Tour booking successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tour booked successfully"
        400:
          description: Bad request, invalid input
        401:
          description: Unauthorized, invalid or missing token

  /manage-booking/booking-detail/{id}:
    get:
      summary: Get booking details
      description: Retrieves details of a specific booking by ID.
      tags:
        - Booking Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
        - in: path
          name: id
          required: true
          description: ID of the booking to retrieve.
          schema:
            type: string
            example: 1
      responses:
        200:
          description: Booking details retrieved successfully.
        404:
          description: Booking not found.
        401:
          description: Unauthorized.

  /manage-booking-tour/tour-list:
    get:
      summary: Create a new booking for a tour
      description: Allows an admin to create a new booking for a specific tour.
      tags:
        - Booking Management
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: Authorization token
      requestBody:
        required: true
        content:
          application/json:
      responses:
        200:
          description: Booking created successfully.
        400:
          description: Invalid data.
        401:
          description: Unauthorized.

  /manage-booking-tour/edit-booking/{id}:
    put:
      summary: Edit an existing booking
      description: Allows an admin to update an existing booking.
      tags:
        - Booking Management
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the booking to update.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: "2024-12-15"
                numberOfPeople:
                  type: integer
                  example: 3
      responses:
        200:
          description: Booking updated successfully.
        400:
          description: Invalid data.
        401:
          description: Unauthorized.

  /manage-booking-tour/delete-booking:
    delete:
      summary: Delete a booking
      description: Allows an admin to delete a specific booking.
      tags:
        - Booking Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingIds:
                  type: array
                  items:
                    type: integer
                    example: [1, 2]
      responses:
        200:
          description: Booking deleted successfully.
        404:
          description: Booking not found.
        401:
          description: Unauthorized.
        /manage-comment/comment-list:
    get:
      summary: Get list of comments
      description: Retrieves a list of all comments.
      tags:
        - Comment Management
      responses:
        200:
          description: List of comments.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    user:
                      type: string
                      example: "Jane Doe"
                    comment:
                      type: string
                      example: "Great tour, had an amazing time!"
        401:
          description: Unauthorized.

  /manage-comment/comment-detail/{id}:
    get:
      summary: Get comment details
      description: Retrieves details of a specific comment by ID.
      tags:
        - Comment Management
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the comment to retrieve.
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Comment details retrieved successfully.
        404:
          description: Comment not found.
        401:
          description: Unauthorized.

  /manage-comment/create-comment:
    post:
      summary: Create a new comment
      description: Allows an admin to create a new comment.
      tags:
        - Comment Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                tourId:
                  type: integer
                  example: 1
                comment:
                  type: string
                  example: "Amazing tour experience!"
      responses:
        200:
          description: Comment created successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.

  /manage-comment/edit-comment/{id}:
    put:
      summary: Edit a comment
      description: Allows an admin to update a comment.
      tags:
        - Comment Management
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the comment to edit.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "Updated review, really enjoyed it!"
      responses:
        200:
          description: Comment updated successfully.
        400:
          description: Invalid data.
        401:
          description: Unauthorized.

  /manage-comment/delete-comment:
    delete:
      summary: Delete a comment
      description: Deletes a specific comment.
      tags:
        - Comment Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentIds:
                  type: array
                  items:
                    type: integer
                    example: [1, 2]
      responses:
        200:
          description: Comment deleted successfully.
        404:
          description: Comment not found.
        401:
          description: Unauthorized.

  /manage-review/review-list:
    get:
      summary: Get list of reviews
      description: Retrieves a list of all reviews.
      tags:
        - Review Management
      responses:
        200:
          description: List of reviews.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    review:
                      type: string
                      example: "Wonderful experience, will recommend!"
        401:
          description: Unauthorized.

  /manage-review/create-review:
    post:
      summary: Create a new review
      description: Allows an admin to create a new review.
      tags:
        - Review Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                tourId:
                  type: integer
                  example: 1
                review:
                  type: string
                  example: "Incredible experience, highly recommended!"
      responses:
        200:
          description: Review created successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.

  /manage-review/review-detail/{id}:
    get:
      summary: Get review details
      description: Retrieves details of a specific review by ID.
      tags:
        - Review Management
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the review to retrieve.
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Review details retrieved successfully.
        404:
          description: Review not found.
        401:
          description: Unauthorized.

  /manage-review/edit-review:
    put:
      summary: Edit a review
      description: Allows an admin to edit a review.
      tags:
        - Review Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: string
                  example: "Updated review, had an even better time!"
      responses:
        200:
          description: Review updated successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.

  /manage-review/delete-review:
    delete:
      summary: Delete a review
      description: Deletes a specific review.
      tags:
        - Review Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewIds:
                  type: array
                  items:
                    type: integer
                    example: [1, 2]
      responses:
        200:
          description: Review deleted successfully.
        404:
          description: Review not found.
        401:
          description: Unauthorized.

  /manage-payment/payment-list:
    get:
      summary: Get list of payments
      description: Retrieves a list of all payments.
      tags:
        - Payment Management
      responses:
        200:
          description: List of payments.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    paymentAmount:
                      type: number
                      example: 500
                    paymentStatus:
                      type: string
                      example: "Completed"
        401:
          description: Unauthorized.

  /manage-payment/payment-detail/{id}:
    get:
      summary: Get payment details
      description: Retrieves details of a specific payment by ID.
      tags:
        - Payment Management
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the payment to retrieve.
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Payment details retrieved successfully.
        404:
          description: Payment not found.
        401:
          description: Unauthorized.

  /manage-payment/create-payment:
    post:
      summary: Create a new payment
      description: Allows an admin to create a new payment.
      tags:
        - Payment Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                amount:
                  type: number
                  example: 500
                status:
                  type: string
                  example: "Completed"
      responses:
        200:
          description: Payment created successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.

  /manage-payment/edit-payment/{id}:
    put:
      summary: Edit payment details
      description: Allows an admin to edit a payment.
      tags:
        - Payment Management
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the payment to edit.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 600
                status:
                  type: string
                  example: "Pending"
      responses:
        200:
          description: Payment updated successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.

  /manage-payment/delete-payment:
    delete:
      summary: Delete a payment
      description: Deletes a specific payment.
      tags:
        - Payment Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentIds:
                  type: array
                  items:
                    type: integer
                    example: [1, 2]
      responses:
        200:
          description: Payment deleted successfully.
        404:
          description: Payment not found.
        401:
          description: Unauthorized.

  /manage-blog/blog-list:
    get:
      summary: Get list of blogs
      description: Retrieves a list of all blogs.
      tags:
        - Blog Management
      responses:
        200:
          description: List of blogs.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "5 Amazing Destinations"
        401:
          description: Unauthorized.

  /manage-blog/create-blog:
    post:
      summary: Create a new blog
      description: Allows an admin to create a new blog.
      tags:
        - Blog Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Exploring the Hidden Gems of the World"
                content:
                  type: string
                  example: "Discover the lesser-known destinations..."
      responses:
        200:
          description: Blog created successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.

  /manage-blog/blog-detail/{id}:
    get:
      summary: Get blog details
      description: Retrieves details of a specific blog by ID.
      tags:
        - Blog Management
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the blog to retrieve.
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Blog details retrieved successfully.
        404:
          description: Blog not found.
        401:
          description: Unauthorized.

  /manage-blog/edit-blog/{id}:
    put:
      summary: Edit a blog
      description: Allows an admin to update a blog.
      tags:
        - Blog Management
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the blog to update.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated blog title"
                content:
                  type: string
                  example: "Updated blog content..."
      responses:
        200:
          description: Blog updated successfully.
        400:
          description: Invalid input data.
        401:
          description: Unauthorized.

  /manage-blog/delete-blog:
    delete:
      summary: Delete a blog
      description: Deletes a specific blog.
      tags:
        - Blog Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blogIds:
                  type: array
                  items:
                    type: integer
                    example: [1, 2]
      responses:
        200:
          description: Blog deleted successfully.
        404:
          description: Blog not found.
        401:
          description: Unauthorized.
  /sign-up:
    post:
      summary: User Sign-Up
      operationId: signUp
      tags:
        - Authentication
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        "201":
          description: User successfully created
        "400":
          description: Bad request
    /login:
      post:
      summary: User Login
      operationId: login
      tags:
        - Authentication
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Login successful
        "401":
          description: Unauthorized

  /send-otp:
    post:
      summary: Send OTP for password recovery
      operationId: sendOtp
      tags:
        - Authentication
      responses:
        "200":
          description: OTP sent to the user's email
        "400":
          description: Bad request

  /new-password:
    post:
      summary: Set a new password
      operationId: newPassword
      tags:
        - Authentication
      requestBody:
        description: New password and OTP
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Invalid OTP or password

  /profile:
    get:
      summary: Get user profile
      operationId: getProfile
      tags:
        - Authentication
      responses:
        "200":
          description: User profile details
        "401":
          description: Unauthorized

  /post-blog:
    post:
      summary: Create a new blog post
      operationId: postBlog
      tags:
        - Authentication
      requestBody:
        description: Blog post details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        "201":
          description: Blog post created
        "400":
          description: Bad request

  /my-blogs:
    get:
      summary: Get all blog posts by the user
      operationId: getAllBlog
      tags:
        - Authentication
      responses:
        "200":
          description: List of user's blog posts
        "401":
          description: Unauthorized

  /blog/{id}:
    get:
      summary: Get blog details by ID
      operationId: detailBlog
      tags:
        - Authentication
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog post details
        "404":
          description: Blog not found

  /edit-blog/{id}:
    put:
      summary: Edit a blog post by ID
      operationId: editBlog
      tags:
        - Authentication
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Updated blog post details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        "200":
          description: Blog post updated
        "404":
          description: Blog not found

  /remove-blog/{id}:
    delete:
      summary: Remove a blog post by ID
      operationId: removeBlog
      tags:
        - Authentication
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog post deleted
        "404":
          description: Blog not found

  /comment-blog/{id}:
    post:
      summary: Comment on a blog post
      operationId: commentBlog
      tags:
        - Authentication
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Comment details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        "201":
          description: Comment added
        "404":
          description: Blog not found

  /edit-comment/{id}:
    patch:
      summary: Edit a comment
      operationId: updateComment
      tags:
        - Authentication
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Updated comment details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        "200":
          description: Comment updated
        "404":
          description: Comment or blog not found

  /remove-comment/{id}:
    delete:
      summary: Remove a comment
      operationId: removeComment
      tags:
        - Authentication
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Comment removed
        "404":
          description: Comment or blog not found

  /book-tour/{tourId}:
    post:
      summary: Book a tour and proceed to payment
      operationId: tourPayment
      tags:
        - Authentication
      parameters:
        - in: path
          name: tourId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tour booked successfully
        "400":
          description: Bad request

  /my-book-tour:
    get:
      summary: Get list of tours booked by the user
      operationId: getBookedList
      tags:
        - Authentication
      responses:
        "200":
          description: List of booked tours
        "401":
          description: Unauthorized

  /evaluate-guide/{guideId}:
    post:
      summary: Evaluate a tour guide
      operationId: evaluateGuide
      tags:
        - Authentication
      parameters:
        - in: path
          name: guideId
          required: true
          schema:
            type: string
      requestBody:
        description: Guide evaluation details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        "200":
          description: Guide evaluated
        "400":
          description: Bad request
        "404":
          description: Guide not found
